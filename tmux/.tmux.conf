#  UTF-8
# set-window-option -g utf8 on
# set -g status-utf8 on

# Start windows and panes at 1, not 0
set -g base-index 1
setw -g pane-base-index 1

# Mouse
# set -g mouse off
set-option -g mouse on
# set -g mouse-resize-pane on
# set -g mouse-select-pane on
# set -g mouse-select-window on
# Mouse support - set to on if you want to use the mouse.
# setw -g mode-mouse off
# set -g mouse-select-pane off
# set -g mouse-resize-pane off
# set -g mouse-select-window off

# Mac specific copy and paste
# set-option -g default-command "reattach-to-user-namespace -l zsh"

# Sane scrolling
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e; send-keys -M'"

# Config Reload
# Use prefix + R
# Deprecated
# bind-key r source-file ~/.tmux.conf \; display-message "Config reloaded."

# set-option -g prefix C-a
# bind-key a send-prefix
# Free the original `Ctrl-b` prefix keybinding.
unbind-key C-b

# By remapping the `CapsLock` key to `Ctrl`,
# you can make triggering commands more comfottable!
# Setting the prefix from `C-b` to `C-Space`.
set -g prefix C-Space

# Ensure that we can send `Ctrl-Space` to other apps.
bind-key Space send-prefix

# allow 256 colors in terminal
# set -g default-terminal "screen-256color"
# set -g default-terminal "screen"
set -g default-terminal "screen-256color"

# allow mouse scrolling in copy mode and also also focus pane when mouse hover with swipe
set -g terminal-overrides 'xterm*:smcup@:rmcup@'
# From checkhealth (in neovim)
set-option -sa terminal-overrides ',alacritty:RGB'

set -g default-terminal "tmux-256color"
set -ag terminal-overrides ",xterm-256color:RGB"

 #Splits
# bind-key | split-window -h
# bind-key - split-window -v

# bind-key l split-window -h
# bind-key C-l split-window -h

# bind-key j split-window -v
# bind-key C-j split-window -v

# Window kills
bind-key q kill-window
bind-key C-q kill-window

# Pane kills
bind-key x kill-pane
bind-key C-x kill-pane

bind-key b list-panes

# Last session
bind-key C-[ switch-client -l

# Clear Screen with M-l
bind -n M-l "send-keys C-l"

# Status Line
# set-option -g status-utf8 on
# set -g status-bg black
# set -g status-fg green
# set -g status-left-length 15
# set -g status-left ' #[fg=cyan,bright]#10H#[fg=green]:#[fg=white]#S#[fg=green] | #[default]'
# set -g status-right '#{prefix_highlight} | Online #{online_status} | %H:%M | #{cpu_icon} #{cpu_percentage} | #{battery_icon} #{battery_percentage} #{battery_remain}'
# set -g status-justify centre

# Battery icon
# set -g @batt_charged_icon "❇"
# set -g @batt_charging_icon "↑"
# set -g @batt_discharging_icon "↓"

# Load the status file generated from vim tmuxline
# alternatively, check file exists before sourcing it in tmux.conf
# if-shell "test -f ~/.tmux/status/status.tmux" "source ~/.tmux/status/status.tmux"

set -g history-limit 200000
# bind-key r source-file ~/.tmux.conf
bind-key S command-prompt -p ssh: "new-window -n %1 'ssh %1'"

# Moves
# Smart pane switching with awareness of vim splits
# See: https://github.com/christoomey/vim-tmux-navigator
# is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
is_fzf="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?fzf$'"

# bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
# bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
# bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
# bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
# bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

bind -n C-h run "($is_vim && tmux send-keys C-h) || \
                 tmux select-pane -L"

bind -n C-j run "($is_vim && tmux send-keys C-j)  || \
                 ($is_fzf && tmux send-keys C-j) || \
                 tmux select-pane -D"

bind -n C-k run "($is_vim && tmux send-keys C-k) || \
                 ($is_fzf && tmux send-keys C-k)  || \
                 tmux select-pane -U"

bind -n C-l run "($is_vim && tmux send-keys C-l) || \
                 tmux select-pane -R"

# bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Log output to a text file on demand.
# bind P pipe-pane -o "cat >>~/#W.log" \; display "Toggled logging to ~/#W.log"

# Navigating through windows
bind-key N previous-window
# unbind -n S-Tab
# unbind -n M-Tab
# unbind -n C-Tab
# bind-key -n C-Tab next-window
# bind-key -n M-Tab previous-window

# # Smart pane switching with awareness of vim splits

# bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys C-h) || tmux select-pane -L"
# bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys C-j) || tmux select-pane -D"
# bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys C-k) || tmux select-pane -U"
# bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys C-l) || tmux select-pane -R"
# bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys 'C-\\') || tmux select-pane -l"

# tmux-resurrect
# set -g @resurrect-strategy-vim 'session'
# set -g @resurrect-strategy-nvim 'session'
# set -g @resurrect-strategy-gvim 'session'
# set -g @resurrect-processes '~gvim->gvim -v'

# don't rename windows automatically
set-option -g allow-rename off

# v and y like vi in copy-mode
setw -g mode-keys vi
set -g status-keys vi
# bind-key -T copy-mode-vi Up history-up
# bind-key -T copy-mode-vi Down history-down
# unbind-key [
# unbind-key ]
unbind-key v
# bind-key v paste-buffer
# bind-key p previous-window
bind-key Space copy-mode
bind-key C-Space copy-mode
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key C-z resize-pane -Z
# set -g @yank_selection 'primary' # or 'secondary' or 'clipboard'
# Copy into the clipboard as well
bind-key -T copy-mode-vi y send-keys -X copy-pipe "xclip"

# Fix
set -g set-clipboard on
set -g @override_copy_command 'xclip -i -selection clipboard'
set -g @yank_selection 'clipboard'
set -as terminal-features ',*:clipboard'

# bind -n M-l send-keys 'C-l'
bind -n M-Enter send-keys 'C-l'
bind -n M-r run-shell '~/.tmux/plugins/tmux-copycat/scripts/copycat_search.sh'

# List of plugins

# displays online status of your computer.
# set -g @plugin 'tmux-plugins/tmux-online-status'
# key bindings for quick opening of a highlighted file or url
set -g @plugin 'tmux-plugins/tmux-open'
# Persists tmux environment across system restarts.
# set -g @plugin 'tmux-plugins/tmux-resurrect'
# Continuous saving of tmux environment. Automatic restore when tmux is started. Automatic tmux start when computer is turned on.
# set -g @plugin 'tmux-plugins/tmux-continuum'
# enhances tmux search
set -g @plugin 'tmux-plugins/tmux-copycat'
# copying to system clipboard
set -g @plugin 'tmux-plugins/tmux-yank'
# Battery usage
# set -g @plugin 'tmux-plugins/tmux-battery'
# prefix
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'

# Coloscheme rose-pine
set -g @plugin 'rose-pine/tmux'
set -g @rose_pine_variant 'moon'
set -g @rose_pine_host 'on' # Enables hostname in the status bar
set -g @rose_pine_date_time '%d/%m/%Y %H:%M' # It accepts the date UNIX command format (man date for info)
set -g @rose_pine_user 'on' # Turn on the username component in the statusbar
# set -g @rose_pine_directory 'on' # Turn on the current folder component in the status bar
set -g @rose_pine_bar_bg_disable '256-color' # Disables background color, for transparent terminal emulators
# If @rose_pine_bar_bg_disable is set to 'on', uses the provided value to set the background color
# # It can be any of the on tmux (named colors, 256-color set, `default` or hex colors)
# # See more on http://man.openbsd.org/OpenBSD-current/man1/tmux.1#STYLES
# set -g @rose_pine_bar_bg_disabled_color_option 'default'
#
# set -g @rose_pine_only_windows 'off' # Leaves only the window module, for max focus and space
# set -g @rose_pine_disable_active_window_menu 'on' # Disables the menu that shows the active window on the left
#
# set -g @rose_pine_default_window_behavior 'on' # Forces tmux default window list behaviour
# set -g @rose_pine_show_current_program 'on' # Forces tmux to show the current running program as window name
# set -g @rose_pine_show_pane_directory 'on' # Forces tmux to show the current directory as window name
# # Previously set -g @rose_pine_window_tabs_enabled
#
# # Example values for these can be:
set -g @rose_pine_left_separator ' > ' # The strings to use as separators are 1-space padded
set -g @rose_pine_right_separator ' < ' # Accepts both normal chars & nerdfont icons
set -g @rose_pine_field_separator ' | ' # Again, 1-space padding, it updates with prefix + I
set -g @rose_pine_window_separator ' - ' # Replaces the default `:` between the window number and name
#
# # These are not padded
# set -g @rose_pine_session_icon '' # Changes the default icon to the left of the session name
# set -g @rose_pine_current_window_icon '' # Changes the default icon to the left of the active window name
# set -g @rose_pine_folder_icon '' # Changes the default icon to the left of the current directory folder
# set -g @rose_pine_username_icon '' # Changes the default icon to the right of the hostname
# set -g @rose_pine_hostname_icon '󰒋' # Changes the default icon to the right of the hostname
set -g @rose_pine_date_time_icon '󰃰' # Changes the default icon to the right of the date module
# set -g @rose_pine_window_status_separator "  " # Changes the default icon that appears between window names
set -g @rose_pine_window_status_separator " | " # Changes the default icon that appears between window names
#
# # Very beta and specific opt-in settings, tested on v3.2a, look at issue #10
# set -g @rose_pine_prioritize_windows 'on' # Disables the right side functionality in a certain window count / terminal width
# set -g @rose_pine_width_to_hide '80' # Specify a terminal width to toggle off most of the right side functionality
# set -g @rose_pine_window_count '5' # Specify a number of windows, if there are more than the number, do the same as width_to_hide

# Load rose pine
run "~/.tmux/plugins/tmux/rose-pine.tmux"

set -g @plugin 'whame/tmux-modal'
# CPU usage
# set -g @plugin 'tmux-plugins/tmux-cpu'
# standard pane key-bindings for tmux
set -g @plugin 'Chouffe/tmux-pain-control'
# Easy logging and screen capturing for Tmux.
set -g @plugin 'tmux-plugins/tmux-logging'
# Complete commands that require you to retype text that is already on the screen. This works everywhere, even in remote ssh sessions
set -g @plugin 'laktak/extrakto'
# A tmux plugin for opening urls from browser quickly without mouse.
set -g @plugin 'wfxr/tmux-fzf-url'
# A tmux plugin to better manage the mouse.
# mouse-mode needs to be enabled: `set-option -g mouse on`
set -g @plugin 'nhdaly/tmux-better-mouse-mode'

# Pane Colors
# set -g pane-border-fg black
# set -g pane-border-fg magenta
# set -g pane-active-border-fg green
# set -g pane-active-border-bg black
# set -g pane-active-border-bg brightred
# set -g pane-border-fg green
# set -g pane-border-bg black
# set -g pane-active-border-fg white
# set -g pane-active-border-bg yellow

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
